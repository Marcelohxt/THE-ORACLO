# Generated by Django 5.2.3 on 2025-06-20 18:34

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='EntityExtractor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('extractor_type', models.CharField(choices=[('spacy', 'spaCy'), ('nltk', 'NLTK'), ('transformers', 'Transformers'), ('regex', 'Regex'), ('custom', 'Personalizado')], max_length=20)),
                ('model_path', models.CharField(blank=True, max_length=500)),
                ('entity_types', models.JSONField(blank=True, default=list)),
                ('parameters', models.JSONField(blank=True, default=dict)),
                ('languages', models.JSONField(blank=True, default=list)),
                ('avg_processing_time', models.FloatField(blank=True, null=True)),
                ('total_processed', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('is_default', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-is_default', 'name'],
            },
        ),
        migrations.CreateModel(
            name='KeywordExtractor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('extractor_type', models.CharField(choices=[('tfidf', 'TF-IDF'), ('yake', 'YAKE'), ('rake', 'RAKE'), ('textrank', 'TextRank'), ('spacy', 'spaCy'), ('custom', 'Personalizado')], max_length=20)),
                ('parameters', models.JSONField(blank=True, default=dict)),
                ('max_keywords', models.IntegerField(default=10)),
                ('min_keyword_length', models.IntegerField(default=3)),
                ('stop_words', models.JSONField(blank=True, default=list)),
                ('custom_filters', models.JSONField(blank=True, default=list)),
                ('languages', models.JSONField(blank=True, default=list)),
                ('avg_processing_time', models.FloatField(blank=True, null=True)),
                ('total_processed', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('is_default', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-is_default', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ProcessingPipeline',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('pipeline_type', models.CharField(choices=[('text_cleaning', 'Limpeza de Texto'), ('sentiment_analysis', 'Análise de Sentimento'), ('entity_extraction', 'Extração de Entidades'), ('keyword_extraction', 'Extração de Palavras-chave'), ('classification', 'Classificação'), ('summarization', 'Resumo'), ('translation', 'Tradução'), ('custom', 'Personalizado')], max_length=30)),
                ('is_active', models.BooleanField(default=True)),
                ('priority', models.IntegerField(default=5)),
                ('batch_size', models.IntegerField(default=50)),
                ('rules', models.JSONField(blank=True, default=list)),
                ('filters', models.JSONField(blank=True, default=list)),
                ('avg_processing_time', models.FloatField(blank=True, null=True)),
                ('success_rate', models.FloatField(default=100.0)),
                ('total_processed', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ProcessingRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('rule_type', models.CharField(choices=[('text_filter', 'Filtro de Texto'), ('regex_replace', 'Substituição Regex'), ('html_clean', 'Limpeza HTML'), ('language_detect', 'Detecção de Idioma'), ('duplicate_check', 'Verificação de Duplicatas'), ('quality_score', 'Score de Qualidade'), ('spam_detect', 'Detecção de Spam'), ('custom', 'Personalizado')], max_length=30)),
                ('is_active', models.BooleanField(default=True)),
                ('priority', models.IntegerField(default=5)),
                ('parameters', models.JSONField(blank=True, default=dict)),
                ('conditions', models.JSONField(blank=True, default=list)),
                ('total_applied', models.IntegerField(default=0)),
                ('success_count', models.IntegerField(default=0)),
                ('error_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='SentimentModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('model_type', models.CharField(choices=[('vader', 'VADER'), ('textblob', 'TextBlob'), ('transformers', 'Transformers'), ('custom', 'Personalizado')], max_length=20)),
                ('model_path', models.CharField(blank=True, max_length=500)),
                ('parameters', models.JSONField(blank=True, default=dict)),
                ('languages', models.JSONField(blank=True, default=list)),
                ('accuracy', models.FloatField(blank=True, null=True)),
                ('avg_processing_time', models.FloatField(blank=True, null=True)),
                ('total_processed', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('is_default', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-is_default', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ContentFilter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('filter_type', models.CharField(choices=[('keyword', 'Palavra-chave'), ('regex', 'Expressão Regular'), ('category', 'Categoria'), ('source', 'Fonte'), ('date_range', 'Intervalo de Data'), ('sentiment', 'Sentimento'), ('language', 'Idioma'), ('length', 'Tamanho do Texto'), ('quality', 'Qualidade'), ('custom', 'Personalizado')], max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('is_inclusive', models.BooleanField(default=True)),
                ('parameters', models.JSONField(blank=True, default=dict)),
                ('conditions', models.JSONField(blank=True, default=list)),
                ('total_filtered', models.IntegerField(default=0)),
                ('matched_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('categories', models.ManyToManyField(blank=True, to='core.category')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DuplicateGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title_similarity', models.FloatField(default=0.0)),
                ('content_similarity', models.FloatField(default=0.0)),
                ('url_similarity', models.FloatField(default=0.0)),
                ('is_resolved', models.BooleanField(default=False)),
                ('resolution_method', models.CharField(blank=True, max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('articles', models.ManyToManyField(related_name='duplicate_groups', to='core.article')),
                ('canonical_article', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='canonical_for', to='core.article')),
            ],
        ),
        migrations.CreateModel(
            name='ProcessingTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pendente'), ('running', 'Executando'), ('completed', 'Concluída'), ('failed', 'Falhou'), ('cancelled', 'Cancelada')], default='pending', max_length=20)),
                ('scheduled_at', models.DateTimeField()),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('total_articles', models.IntegerField(default=0)),
                ('processed_articles', models.IntegerField(default=0)),
                ('failed_articles', models.IntegerField(default=0)),
                ('errors', models.JSONField(blank=True, default=list)),
                ('processing_time', models.FloatField(blank=True, null=True)),
                ('memory_usage', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('articles', models.ManyToManyField(blank=True, to='core.article')),
                ('pipeline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='data_processor.processingpipeline')),
            ],
            options={
                'ordering': ['-scheduled_at'],
            },
        ),
        migrations.CreateModel(
            name='QualityScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('readability_score', models.FloatField(blank=True, null=True)),
                ('completeness_score', models.FloatField(blank=True, null=True)),
                ('accuracy_score', models.FloatField(blank=True, null=True)),
                ('relevance_score', models.FloatField(blank=True, null=True)),
                ('overall_score', models.FloatField(blank=True, null=True)),
                ('factors', models.JSONField(blank=True, default=dict)),
                ('calculated_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('article', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='quality_score', to='core.article')),
            ],
        ),
    ]
